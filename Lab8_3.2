//github: https://github.com/KomarovaAnastasiia/Lab8_3.2.git

#include <iostream>

template<typename T>
class Node {
public:
    T data;
    Node<T>* prev;
    Node<T>* next;
    
    Node(const T& value) : data(value), prev(nullptr), next(nullptr) {}
};

template<typename T>
class DoublyLinkedList {
private:
    Node<T>* head;
    Node<T>* tail;
    int size;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    ~DoublyLinkedList() {
        while (head != nullptr) {
            Node<T>* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void pushBack(const T& value) {
        Node<T>* newNode = new Node<T>(value);
        if (tail == nullptr) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    void display() const {
        Node<T>* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }

    int getSize() const {
        return size;
    }
};

int main() {
    DoublyLinkedList<int> dll;
    dll.pushBack(1);
    dll.pushBack(2);
    dll.pushBack(3);
    dll.pushBack(4);

    std::cout << "Розмір двозв'язного списку: " << dll.getSize() << std::endl;
    std::cout << "Елементи двозв'язного списку: ";
    dll.display();

    return 0;
}
